# %%
import aiohttp
import sys
from IPython.display import Image, display
from random import randrange

# %%
subscriptionKey = "VfprVpOrwyh_rmHGm5_WP6yOMQRScSXzP_U2BgcagWs"

# eyre sq galway
currentLocation = [53.2743, -9.0492]
# o'connell st dublin
destination = [53.3430, -6.2562]



# Parameters for the vehicle consumption model 
travelMode = "car"
vehicleEngineType = "electric"
currentChargeInkWh=100
maxChargeInkWh=100

# 100km budget in meters
distanceBudgetInMeters=100000

routeType="eco"
constantSpeedConsumptionInkWhPerHundredkm="50,8.2:130,21.3"

session = aiohttp.ClientSession()

class EVCharger:
   def __init__(self, location, inUse, chargerType, outOfOrder):
      self.location = location
      self.inUse = inUse
      self.chargerType = chargerType
      self.outOfOrder = outOfOrder

# function to set up mock data
# take reachable ev charger locations and randomly set some
# as usable.
def setupChargerData(mockReachableLocs):
  mockChargers = []
  rnd = randrange(1,8)
  count = 1
  for l in mockReachableLocs:
    if count % rnd == 0:
      # set charger available and working
      mockChargers.append(EVCharger([l[1],l[0]], False, "", False))
    else:
      if count % 2 == 0:
        # set charger in use
        mockChargers.append(EVCharger([l[1],l[0]], True, "", False))
      else:
        # set charger out of order
        mockChargers.append(EVCharger([l[1],l[0]], False, "", True))
    count = count+1
  return mockChargers



# Get bounds for the electric vehicle's reachable range.
routeRangeResponse = await (await session.get("https://atlas.microsoft.com/route/range/json?subscription-key={}&api-version=1.0&query={}&travelMode={}&vehicleEngineType={}&currentChargeInkWh={}&maxChargeInkWh={}&distanceBudgetInMeters={}&routeType={}&constantSpeedConsumptionInkWhPerHundredkm={}"
                                              .format(subscriptionKey,str(currentLocation[0])+","+str(currentLocation[1]),travelMode, vehicleEngineType, currentChargeInkWh, maxChargeInkWh, distanceBudgetInMeters, routeType, constantSpeedConsumptionInkWhPerHundredkm))).json()

# get boundary latitudes and longitudes
polyBounds = routeRangeResponse["reachableRange"]["boundary"]

coordList = []
for i in range(len(polyBounds)):
   coordList = list(polyBounds[i].values())
   coordList[0], coordList[1] = coordList[1], coordList[0]
   polyBounds[i] = coordList

polyBounds.pop()
polyBounds.append(polyBounds[0])


boundsData = {
               "geometry": {
                 "type": "Polygon",
                 "coordinates": 
                   [
                      polyBounds
                   ]
                }
             }



# %%


# Search for EV stations within reachable range.
searchPolyResponse = await (await session.post(url = "https://atlas.microsoft.com/search/geometry/json?subscription-key={}&api-version=1.0&query=electric vehicle station&idxSet=POI&limit=50".format(subscriptionKey), json = boundsData)).json() 

reachableLocations = []
for loc in range(len(searchPolyResponse["results"])):
    location = list(searchPolyResponse["results"][loc]["position"].values())
    location[0], location[1] = location[1], location[0]
    reachableLocations.append(location)


# %%
# Get bounds for bounding box.
def getBounds(polyBounds):
    maxLon = max(map(lambda x: x[0], polyBounds))
    minLon = min(map(lambda x: x[0], polyBounds))

    maxLat = max(map(lambda x: x[1], polyBounds))
    minLat = min(map(lambda x: x[1], polyBounds))
    
    # Buffer the bounding box by 10% to account for the pixel size of pins at the ends of the route.
    lonBuffer = (maxLon-minLon)*0.1
    minLon -= lonBuffer
    maxLon += lonBuffer

    latBuffer = (maxLat-minLat)*0.1
    minLat -= latBuffer
    maxLat += latBuffer
    
    return [minLon, maxLon, minLat, maxLat]

# Get string in format "-9.0507, 53.27821|-8.22082 53.32923|-8.64753 52.67553" 
# from 2d list of points [[-9.0507, 53.27821], [-8.22082, 53.32923], [-8.64753, 52.67553]]
def getPointsString(locations):
    points = ""
    for innerlist in locations:
        points = points + str(innerlist[0]) + " " + str(innerlist[1]) + "|"

    return points[:-1]


minLon, maxLon, minLat, maxLat = getBounds(polyBounds)
path ="lcff3333|lw3|la0.80|fa0.35||" + getPointsString(polyBounds)
pins = "default||" + getPointsString(reachableLocations)

# Render range and EV charging points on the map.
staticMapResponse =  await session.get("https://atlas.microsoft.com/map/static/png?api-version=1.0&subscription-key={}&pins={}&path={}&bbox={}&zoom=7".format(subscriptionKey,pins,path,str(minLon)+", "+str(minLat)+", "+str(maxLon)+", "+str(maxLat)))
poiRangeMap = await staticMapResponse.content.read()
display(Image(poiRangeMap))

# %%
destinationToReachableLocations = {
            "origins": {
              "type": "MultiPoint",
              "coordinates": [[destination[1],destination[0]]]
            },
            "destinations": {
              "type": "MultiPoint",
              "coordinates": reachableLocations
            }
         }

# create mock charger data on reachable chargers
mockChargers = setupChargerData(reachableLocations)

# Get the travel time and distance to every given charging station location from the destination.
searchPolyRes = await (await session.post(url = "https://atlas.microsoft.com/route/matrix/json?subscription-key={}&api-version=1.0&routeType=shortest&waitForResults=true".format(subscriptionKey), json = destinationToReachableLocations)).json()

distances = []
for dist in range(len(reachableLocations)):
    distances.append(searchPolyRes["matrix"][0][dist]["response"]["routeSummary"]["travelTimeInSeconds"])

# return false if the charger at the given location
# has no data, is in use, or is out of order
def validateCharger(location):
  for charger in mockChargers:
    if charger.location != location:
      continue
    if charger.inUse is True:
      print("charger at ",charger.location," is in use")
      return False
    elif charger.outOfOrder is True:
      print("charger at ",charger.location," is out of order")
      return False
    print("charger at ", charger.location, " is available")
    return True
  print("charger", location," not in known charger list")
  return False


minDistLoc = []
validChargerExists = True
for i in range(len(distances)):
  minDistLoc = []
  minDistIndex = distances.index(min(distances))
  minDistLoc.extend([reachableLocations[minDistIndex][1], reachableLocations[minDistIndex][0]]) 
  validChargerExists = validateCharger(minDistLoc)
  if validChargerExists == True:
    break
  # need to remove the 'best' located charger from
  # reachableLocations and distances for next iteration.
  minDistIndex = distances.index(min(distances))
  del reachableLocations[minDistIndex]
  distances.remove(min(distances))

if validChargerExists == False:
  print("no valid charger can be found for the route")
  sys.exit()


closestChargeLoc = ",".join(str(i) for i in minDistLoc)


# %%
# Get route from current location to the closest charging station. 
routeResponse = await (await session.get("https://atlas.microsoft.com/route/directions/json?subscription-key={}&api-version=1.0&query={}:{}:{}".format(subscriptionKey, str(currentLocation[0])+","+str(currentLocation[1]), closestChargeLoc, str(destination[0])+","+str(destination[1])))).json()

route = []
for leg in routeResponse["routes"][0]["legs"]:
    for loc in range(len(leg["points"])):
        location = list(leg["points"][loc].values())
        location[0], location[1] = location[1], location[0]
        route.append(location)

# remove most points as request size will be too big
route = route[::20]


# %%

destination[1], destination[0] = destination[0], destination[1]

path = "lc0f6dd9|lw2||" + getPointsString(route)
pins = "default|codb1818||{} {}|{} {}|{} {}".format(str(currentLocation[1]),str(currentLocation[0]),minDistLoc[1], minDistLoc[0], destination[0],destination[1])


# Get bounds for bounding box.
minLat, maxLat = (float(destination[1]),currentLocation[0]) if float(destination[1])<currentLocation[0] else (currentLocation[0], float(destination[1]))
minLon, maxLon = (float(destination[0]),currentLocation[1]) if float(destination[0])<currentLocation[1] else (currentLocation[1], float(destination[0]))

#Buffer the bounding box to account for the pixel size of pins at the ends of the route.
lonBuffer = (maxLon-minLon)*.5
minLon -= lonBuffer
maxLon += lonBuffer

latBuffer = (maxLat-minLat)*15
minLat -= latBuffer
maxLat += latBuffer

# Render route on the map.
staticMapResponse = await session.get("https://atlas.microsoft.com/map/static/png?api-version=1.0&subscription-key={}&path={}&pins={}&bbox={}&zoom=7".format(subscriptionKey,path,pins,str(minLon)+", "+str(minLat)+", "+str(maxLon)+", "+str(maxLat)))
staticMapImage = await staticMapResponse.content.read()

await session.close()
display(Image(staticMapImage))

# %%



